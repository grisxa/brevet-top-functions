import pytest

from brevet_top_misc_utils import get_control_window, get_limit_hours


@pytest.mark.parametrize(
    ("distance", "time"),
    [
        (0, 0),
        (200, 13.5),
        (300, 20),
        (303, 20.2),
        (351, 23.4),
        (400, 27),
        (403, 27.2),
        (450, 30),
        (501, 33.4),
        (600, 40),
        (603, 40.2),
        (680, 47),
        (880, 64.5),
        (1000, 75),
        (1004, 75.35),
        (1200, 90),
        (1202, 90.15),
        (1210, 90.75),
    ],
)
def test_get_limit_hours(distance: int, time: float):
    assert round(get_limit_hours(distance), 3) == time


@pytest.mark.parametrize(
    ("distance", "start", "end"),
    [
        (0, 0, 1),
        (60, 1.773, 4.008),
        (61, 1.802, 4.075),
        (200, 5.891, 13.342),
        (201, 5.922, 13.408),
        (300, 9.016, 20.008),
        (303, 9.109, 20.208),
        (351, 10.609, 23.408),
        (400, 12.141, 26.675),
        (405, 12.307, 27.008),
        (450, 13.807, 30.008),
        (501, 15.507, 33.408),
        (600, 18.807, 40.008),
        (603, 18.914, 40.271),
        (681, 21.7, 47.096),
        (882, 28.878, 64.683),
        (1000, 33.093, 75.008),
        (1002, 33.17, 75.158),
        (1200, 40.785, 90.008),
        (1203, 40.906, 90.281),
        (1212, 41.266, 91.099),
        (1400, 48.786, 108.19),
        (1401, 48.826, 108.29),
        (1800, 64.786, 148.19),
        (1803, 64.91, 148.524),
        (2000, 73.119, 170.413),
        (2001, 0, 0),
    ],
)
def test_get_control_window(distance: int, start: float, end: float):
    _start, _end = get_control_window(distance)
    assert (round(_start, 3), round(_end, 3)) == (start, end)
